1. Write a Function named Get_Name () to accept the SSN and return the salary of Professor.
Write a PL/SQL block to call this function and display the output.
2. Write a Function named Get_CName () to accept the Code and return the credits of the
course. Write a PL/SQL block to call this function and display the output.
3. Write a procedure to display the Total of courses taught by any Professor.
4. Create a PL/SQL function named Get_Salary () that accepts an SSN as input and returns the
salary of the professor. Write a PL/SQL block to call this function with a specific SSN and display
the output.
5. Develop a PL/SQL procedure to display the name of the professor who receives the lowest
salary. Write a PL/SQL block to execute this procedure and show the result.
6. Write a PL/SQL block to display the name and credits of a course, given its code (CODE). Assume
the CODE is 101.
7. Create a PL/SQL function named Get_Total_Credits () that accepts an SSN as input and
returns the total number of credits taught by that professor. Write a PL/SQL block to call this
function and display the result.
8. Write a PL/SQL block to display the courses taught by a professor (given SSN) in a specific
semester. Allow the semester to be a parameter in your block.
9. Create a PL/SQL function named Get_Avg_Salary () that calculates and returns the average
salary of all professors. Write a PL/SQL block to call this function and display the result.
10. Develop a PL/SQL procedure to add a new course to the COURSE table. Allow input for
CODE, CNAME, and CREDITS. Write a PL/SQL block to execute this procedure and confirm the
addition.
11. Write a PL/SQL block to display the name, status, and salary of a professor, given their SSN.
Assume the SSN from database
12. Develop a PL/SQL procedure to update the credits of a course (given CODE). Allow input for
the new credit value. Write a PL/SQL block to execute this procedure and confirm the update.





Certainly! Below are PL/SQL blocks and procedures/functions for the tasks you've described:

1. **Function to Get Salary by SSN:**
   ```sql
   CREATE OR REPLACE FUNCTION Get_Name(p_SSN IN NUMBER) RETURN NUMBER IS
      v_Salary NUMBER;
   BEGIN
      -- Assuming there is a table named PROFESSOR with columns SSN and SALARY
      SELECT SALARY INTO v_Salary FROM PROFESSOR WHERE SSN = p_SSN;
      RETURN v_Salary;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL; -- Handle if no data is found for the given SSN
   END;
   /
   
   -- PL/SQL block to call the function and display the output
   DECLARE
      v_Result NUMBER;
   BEGIN
      v_Result := Get_Name(123456789); -- Replace with the desired SSN
      DBMS_OUTPUT.PUT_LINE('Salary of Professor: ' || v_Result);
   END;
   /
   ```

2. **Function to Get Credits by Code:**
   ```sql
   CREATE OR REPLACE FUNCTION Get_CName(p_Code IN NUMBER) RETURN NUMBER IS
      v_Credits NUMBER;
   BEGIN
      -- Assuming there is a table named COURSE with columns CODE and CREDITS
      SELECT CREDITS INTO v_Credits FROM COURSE WHERE CODE = p_Code;
      RETURN v_Credits;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL; -- Handle if no data is found for the given Code
   END;
   /
   
   -- PL/SQL block to call the function and display the output
   DECLARE
      v_Result NUMBER;
   BEGIN
      v_Result := Get_CName(101); -- Replace with the desired Code
      DBMS_OUTPUT.PUT_LINE('Credits of the Course: ' || v_Result);
   END;
   /
   ```

3. **Procedure to Display Total Courses by Professor:**
   ```sql
   CREATE OR REPLACE PROCEDURE Display_Total_Courses(p_SSN IN NUMBER) IS
      v_Total_Courses NUMBER;
   BEGIN
      -- Assuming there is a table named TEACHES with columns SSN and COURSE_ID
      SELECT COUNT(DISTINCT COURSE_ID) INTO v_Total_Courses FROM TEACHES WHERE SSN = p_SSN;
      DBMS_OUTPUT.PUT_LINE('Total Courses Taught: ' || v_Total_Courses);
   END;
   /
   
   -- PL/SQL block to execute the procedure
   DECLARE
      v_SSN NUMBER := 123456789; -- Replace with the desired SSN
   BEGIN
      Display_Total_Courses(v_SSN);
   END;
   /
   ```

Certainly! Here are the PL/SQL blocks for tasks 4, 5, and 6:

4. **PL/SQL Function to Get Salary by SSN:**
   ```sql
   CREATE OR REPLACE FUNCTION Get_Salary(p_SSN IN NUMBER) RETURN NUMBER IS
      v_Salary NUMBER;
   BEGIN
      -- Assuming there is a table named PROFESSOR with columns SSN and SALARY
      SELECT SALARY INTO v_Salary FROM PROFESSOR WHERE SSN = p_SSN;
      RETURN v_Salary;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL; -- Handle if no data is found for the given SSN
   END;
   /
   
   -- PL/SQL block to call the function and display the output
   DECLARE
      v_Result NUMBER;
      v_SSN NUMBER := 123456789; -- Replace with the desired SSN
   BEGIN
      v_Result := Get_Salary(v_SSN);
      DBMS_OUTPUT.PUT_LINE('Salary of Professor with SSN ' || v_SSN || ': ' || v_Result);
   END;
   /
   ```

5. **PL/SQL Procedure to Display Name of Professor with Lowest Salary:**
   ```sql
   CREATE OR REPLACE PROCEDURE Display_Lowest_Salary_Professor IS
      v_Professor_Name PROFESSOR.PROF_NAME%TYPE;
   BEGIN
      -- Assuming there is a table named PROFESSOR with columns PROF_NAME and SALARY
      SELECT PROF_NAME INTO v_Professor_Name
      FROM PROFESSOR
      WHERE SALARY = (SELECT MIN(SALARY) FROM PROFESSOR);

      DBMS_OUTPUT.PUT_LINE('Professor with Lowest Salary: ' || v_Professor_Name);
   END;
   /
   
   -- PL/SQL block to execute the procedure
   BEGIN
      Display_Lowest_Salary_Professor;
   END;
   /
   ```

6. **PL/SQL Block to Display Name and Credits of a Course by Code:**
   ```sql
   -- Assuming there is a table named COURSE with columns CODE, CNAME, and CREDITS
   DECLARE
      v_Course_Name COURSE.CNAME%TYPE;
      v_Course_Credits COURSE.CREDITS%TYPE;
      v_Course_Code NUMBER := 101; -- Replace with the desired Code
   BEGIN
      SELECT CNAME, CREDITS
      INTO v_Course_Name, v_Course_Credits
      FROM COURSE
      WHERE CODE = v_Course_Code;

      DBMS_OUTPUT.PUT_LINE('Course Name: ' || v_Course_Name || ', Credits: ' || v_Course_Credits);
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         DBMS_OUTPUT.PUT_LINE('Course with Code ' || v_Course_Code || ' not found.');
   END;
   /
   ```

Certainly! Here are the PL/SQL blocks for tasks 7, 8, and 9:

7. **PL/SQL Function to Get Total Credits by SSN:**
   ```sql
   CREATE OR REPLACE FUNCTION Get_Total_Credits(p_SSN IN NUMBER) RETURN NUMBER IS
      v_Total_Credits NUMBER;
   BEGIN
      -- Assuming there is a table named TEACHES with columns SSN and COURSE_ID
      SELECT SUM(CREDITS) INTO v_Total_Credits
      FROM COURSE
      WHERE CODE IN (SELECT COURSE_ID FROM TEACHES WHERE SSN = p_SSN);

      RETURN v_Total_Credits;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL; -- Handle if no data is found for the given SSN
   END;
   /
   
   -- PL/SQL block to call the function and display the result
   DECLARE
      v_Result NUMBER;
      v_SSN NUMBER := 123456789; -- Replace with the desired SSN
   BEGIN
      v_Result := Get_Total_Credits(v_SSN);
      DBMS_OUTPUT.PUT_LINE('Total Credits Taught by Professor with SSN ' || v_SSN || ': ' || v_Result);
   END;
   /
   ```

8. **PL/SQL Block to Display Courses Taught in a Specific Semester by Professor:**
   ```sql
   -- Assuming there is a table named TEACHES with columns SSN, COURSE_ID, and SEMESTER
   DECLARE
      v_SSN NUMBER := 123456789; -- Replace with the desired SSN
      v_Semester VARCHAR2(20) := 'Spring 2023'; -- Replace with the desired semester
   BEGIN
      FOR rec IN (SELECT C.CNAME
                  FROM COURSE C
                  JOIN TEACHES T ON C.CODE = T.COURSE_ID
                  WHERE T.SSN = v_SSN AND T.SEMESTER = v_Semester) LOOP
         DBMS_OUTPUT.PUT_LINE('Course Taught in ' || v_Semester || ': ' || rec.CNAME);
      END LOOP;
   END;
   /
   ```

9. **PL/SQL Function to Get Average Salary of Professors:**
   ```sql
   CREATE OR REPLACE FUNCTION Get_Avg_Salary RETURN NUMBER IS
      v_Avg_Salary NUMBER;
   BEGIN
      -- Assuming there is a table named PROFESSOR with column SALARY
      SELECT AVG(SALARY) INTO v_Avg_Salary FROM PROFESSOR;
      RETURN v_Avg_Salary;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL; -- Handle if there are no professors
   END;
   /
   
   -- PL/SQL block to call the function and display the result
   DECLARE
      v_Result NUMBER;
   BEGIN
      v_Result := Get_Avg_Salary;
      DBMS_OUTPUT.PUT_LINE('Average Salary of Professors: ' || v_Result);
   END;
   /
   ```

Certainly! Below are the PL/SQL blocks for tasks 10, 11, and 12:

10. **PL/SQL Procedure to Add a New Course:**
   ```sql
   CREATE OR REPLACE PROCEDURE Add_New_Course(
      p_Code    IN NUMBER,
      p_CName   IN VARCHAR2,
      p_Credits IN NUMBER
   ) IS
   BEGIN
      -- Assuming there is a table named COURSE with columns CODE, CNAME, and CREDITS
      INSERT INTO COURSE (CODE, CNAME, CREDITS) VALUES (p_Code, p_CName, p_Credits);
      COMMIT; -- Commit the transaction
      DBMS_OUTPUT.PUT_LINE('Course Added Successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
         ROLLBACK; -- Rollback in case of an error
   END;
   /

   -- PL/SQL block to execute the procedure and confirm the addition
   BEGIN
      Add_New_Course(103, 'New Course', 4); -- Replace with desired values
   END;
   /
   ```

11. **PL/SQL Block to Display Professor Information by SSN:**
   ```sql
   -- Assuming there is a table named PROFESSOR with columns SSN, PROF_NAME, and STATUS
   DECLARE
      v_SSN NUMBER := 123456789; -- Replace with the desired SSN
      v_Professor_Name PROFESSOR.PROF_NAME%TYPE;
      v_Status PROFESSOR.STATUS%TYPE;
      v_Salary PROFESSOR.SALARY%TYPE;
   BEGIN
      SELECT PROF_NAME, STATUS, SALARY
      INTO v_Professor_Name, v_Status, v_Salary
      FROM PROFESSOR
      WHERE SSN = v_SSN;

      DBMS_OUTPUT.PUT_LINE('Professor Name: ' || v_Professor_Name);
      DBMS_OUTPUT.PUT_LINE('Status: ' || v_Status);
      DBMS_OUTPUT.PUT_LINE('Salary: ' || v_Salary);
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         DBMS_OUTPUT.PUT_LINE('Professor with SSN ' || v_SSN || ' not found.');
   END;
   /
   ```

12. **PL/SQL Procedure to Update Credits of a Course:**
   ```sql
   CREATE OR REPLACE PROCEDURE Update_Course_Credits(
      p_Code           IN NUMBER,
      p_New_Credits    IN NUMBER
   ) IS
   BEGIN
      -- Assuming there is a table named COURSE with columns CODE and CREDITS
      UPDATE COURSE SET CREDITS = p_New_Credits WHERE CODE = p_Code;
      COMMIT; -- Commit the transaction
      DBMS_OUTPUT.PUT_LINE('Course Credits Updated Successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
         ROLLBACK; -- Rollback in case of an error
   END;
   /

   -- PL/SQL block to execute the procedure and confirm the update
   BEGIN
      Update_Course_Credits(101, 5); -- Replace with desired values
   END;
   /
   ```


